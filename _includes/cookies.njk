{# Banner y modal de preferencias de cookies (AEPD-friendly) #}

<!-- Banner (primera capa) -->
<div id="cookie-banner" class="fixed inset-x-0 bottom-0 z-50 hidden">
  <div class="mx-auto max-w-4xl m-4 rounded-2xl border bg-white shadow-xl p-4 md:p-5">
    <div class="md:flex md:items-start md:gap-4">
      <div class="flex-1">
        <h2 class="text-lg font-semibold mb-1">Tu privacidad nos importa</h2>
        <p class="text-sm text-gray-600">
          Usamos cookies necesarias para que el sitio funcione y, opcionalmente, cookies de analítica y marketing para mejorar la experiencia.
          Puedes aceptar, rechazar o configurar tus preferencias. Consulta la
          <a href="/cookies/" class="underline text-green-700">Política de Cookies</a>.
        </p>
      </div>
      <div class="mt-3 md:mt-0 flex-shrink-0 flex gap-2">
        <button type="button" id="cookie-reject-all" class="px-4 py-2 rounded-xl border text-gray-700">Rechazar</button>
        <button type="button" id="cookie-open-prefs" class="px-4 py-2 rounded-xl border text-gray-700">Preferencias</button>
        <button type="button" id="cookie-accept-all" class="px-4 py-2 rounded-xl bg-green-700 text-white">Aceptar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de preferencias (segunda capa) -->
<div id="cookie-modal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/40" aria-hidden="true"></div>
  <div role="dialog" aria-modal="true" aria-labelledby="cookie-modal-title"
       class="mx-auto max-w-xl mt-24 rounded-2xl border bg-white shadow-2xl p-6 relative
              max-h-[80vh] overflow-y-auto">
    <h3 id="cookie-modal-title" class="text-xl font-semibold mb-2">Preferencias de cookies</h3>
    <p class="text-sm text-gray-600 mb-4">Puedes activar o desactivar categorías no esenciales.</p>

    <div class="space-y-4">
      <div class="flex items-start justify-between gap-4 p-3 rounded-lg border">
        <div>
          <p class="font-medium">Necesarias</p>
          <p class="text-sm text-gray-600">Imprescindibles para el funcionamiento básico (no pueden desactivarse).</p>
        </div>
        <input type="checkbox" checked disabled aria-label="Cookies necesarias">
      </div>

      <div class="flex items-start justify-between gap-4 p-3 rounded-lg border">
        <div>
          <p class="font-medium">Analítica</p>
          <p class="text-sm text-gray-600">Medición anónima para mejorar el sitio (sin identificarte).</p>
        </div>
        <input id="ck-analytics" type="checkbox" aria-label="Cookies de analítica">
      </div>

      <div class="flex items-start justify-between gap-4 p-3 rounded-lg border">
        <div>
          <p class="font-medium">Marketing</p>
          <p class="text-sm text-gray-600">Servicios de terceros como el calendario embebido de Calendly.</p>
        </div>
        <input id="ck-marketing" type="checkbox" aria-label="Cookies de marketing">
      </div>
    </div>

    <div class="mt-6 flex justify-end gap-2">
      <button type="button" id="cookie-cancel" class="px-4 py-2 rounded-xl border text-gray-700">Cancelar</button>
      <button type="button" id="cookie-save" class="px-4 py-2 rounded-xl bg-green-700 text-white">Guardar preferencias</button>
    </div>

    <!-- Botón de cierre -->
    <button type="button" class="absolute top-2 right-2 p-2 rounded hover:bg-gray-100" id="cookie-close-x" aria-label="Cerrar">✕</button>
  </div>
</div>

<script>
(() => {
  const LS_KEY = "cookie-consent";
  const IS_TRANSLATE = /\.translate\.goog$/.test(location.hostname);

  const $ = (sel) => document.querySelector(sel);
  const banner = $("#cookie-banner");
  const modal  = $("#cookie-modal");
  const ckAnalytics = $("#ck-analytics");
  const ckMarketing = $("#ck-marketing");

  const btnAcceptAll = $("#cookie-accept-all");
  const btnRejectAll = $("#cookie-reject-all");
  const btnOpenPrefs = $("#cookie-open-prefs");
  const btnSave      = $("#cookie-save");
  const btnCancel    = $("#cookie-cancel");
  const btnCloseX    = $("#cookie-close-x");

  /* ===== Helpers de dominio/origen ===== */
  function getOriginBase() {
    // 1) canonical
    try {
      const can = document.querySelector('link[rel="canonical"]')?.href;
      if (can) return new URL(can).origin;
    } catch {}
    // 2) si estamos en translate, reconstruye dominio original
    if (IS_TRANSLATE) {
      const raw = location.hostname.replace('.translate.goog', '');
      return 'https://' + raw;
    }
    // 3) dominio actual
    return location.origin;
  }
  const ORIGIN_BASE = getOriginBase();

  /* ===== Helpers cookies/localStorage ===== */
  function writeCookie(name, value, maxAgeSecs = 31536000) {
    // IMPORTANTÍSIMO: SameSite=None; Secure para que viaje desde paginas traducidas
    try {
      document.cookie = `${name}=${encodeURIComponent(value)}; Path=/; Max-Age=${maxAgeSecs}; SameSite=None; Secure`;
    } catch {}
  }
  function readCookie(name) {
    try {
      const m = document.cookie.match(new RegExp(`(?:^|; )${name}=([^;]*)`));
      return m ? decodeURIComponent(m[1]) : null;
    } catch { return null; }
  }
  function getLocalConsent() {
    try {
      const raw = localStorage.getItem(LS_KEY);
      if (raw) return JSON.parse(raw);
    } catch {}
    try {
      const c = readCookie(LS_KEY);
      if (c) return JSON.parse(c);
    } catch {}
    return null;
  }
  function saveLocalConsent(consent) {
    const value = { necessary: true, analytics: !!consent.analytics, marketing: !!consent.marketing };
    try { localStorage.setItem(LS_KEY, JSON.stringify(value)); } catch {}
    writeCookie(LS_KEY, JSON.stringify(value));
    return value;
  }

  /* ===== Sincronía con tu dominio (API 1P) ===== */
  async function pullConsentFromOrigin() {
    try {
      const r = await fetch(ORIGIN_BASE + '/api/consent', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' }
      });
      if (!r.ok) return null;
      const data = await r.json();
      return data && data.consent ? data.consent : null;
    } catch { return null; }
  }
  async function pushConsentToOrigin(consent) {
    try {
      await fetch(ORIGIN_BASE + '/api/consent', {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ consent: { analytics: !!consent.analytics, marketing: !!consent.marketing } })
      });
    } catch {}
  }

  /* ===== Aplicación UI ===== */
  function applyConsent(consent) {
    window.cookiePrefs = { necessary: true, analytics: !!consent.analytics, marketing: !!consent.marketing };
    window.dispatchEvent(new CustomEvent("cookie-preferences:updated", { detail: window.cookiePrefs }));
  }
  function showBanner() { banner?.classList.remove("hidden"); }
  function hideBanner() { banner?.classList.add("hidden"); }
  function openModal()  { modal?.classList.remove("hidden"); document.body.style.overflow = "hidden"; }
  function closeModal() { modal?.classList.add("hidden");    document.body.style.overflow = ""; }

  // Limpia parámetros estéticos si llegan (por si acaso)
  function cleanupParams() {
    const sp = new URLSearchParams(location.search);
    let touched = false;
    ["_cc","_nolang"].forEach(k => { if (sp.has(k)) { sp.delete(k); touched = true; } });
    if (touched) {
      const clean = location.pathname + (sp.toString() ? "?" + sp.toString() : "") + location.hash;
      try { history.replaceState({}, "", clean); } catch {}
    }
  }

  // API pública para abrir preferencias
  window.openCookiePreferences = function () {
    const current = getLocalConsent() || { necessary: true, analytics: false, marketing: false };
    if (ckAnalytics) ckAnalytics.checked = !!current.analytics;
    if (ckMarketing) ckMarketing.checked = !!current.marketing;
    openModal();
    (ckAnalytics || ckMarketing || btnSave)?.focus();
  };

  // Botonera banner
  btnAcceptAll?.addEventListener("click", async (e) => {
    e.preventDefault();
    const c = saveLocalConsent({ analytics: true, marketing: true });
    applyConsent(c); hideBanner(); cleanupParams();
    await pushConsentToOrigin(c);
  });
  btnRejectAll?.addEventListener("click", async (e) => {
    e.preventDefault();
    const c = saveLocalConsent({ analytics: false, marketing: false });
    applyConsent(c); hideBanner(); cleanupParams();
    await pushConsentToOrigin(c);
  });
  btnOpenPrefs?.addEventListener("click", (e) => { e.preventDefault(); window.openCookiePreferences(); });

  // Botonera modal
  btnSave?.addEventListener("click", async (e) => {
    e.preventDefault();
    const c = { analytics: ckAnalytics?.checked || false, marketing: ckMarketing?.checked || false };
    const saved = saveLocalConsent(c);
    applyConsent(saved); closeModal(); hideBanner(); cleanupParams();
    await pushConsentToOrigin(saved);
  });
  btnCancel?.addEventListener("click", (e) => { e.preventDefault(); closeModal(); });
  btnCloseX?.addEventListener("click", (e) => { e.preventDefault(); closeModal(); });

  // Init
  document.addEventListener("DOMContentLoaded", async () => {
    // Saca banner/modal de cualquier <form> (por si acaso)
    (function __ensureOutsideForms() {
      const b = document.getElementById("cookie-banner");
      const m = document.getElementById("cookie-modal");
      if (b && b.closest("form")) document.body.appendChild(b);
      if (m && m.closest("form")) document.body.appendChild(m);
    })();

    let consent = getLocalConsent();

    // Si estamos en traducido y no hay preferencia local, tira del origen
    if (!consent && IS_TRANSLATE) {
      const remote = await pullConsentFromOrigin();
      if (remote) {
        consent = saveLocalConsent(remote); // guarda local en translate.goog
      }
    }

    if (consent) {
      applyConsent(consent);
      hideBanner();
    } else {
      showBanner(); // primera visita sin preferencia (o 3PC bloqueadas)
    }

    cleanupParams();
  });

  // Accesibilidad + evitar pop-up "salir del sitio" en Translate
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !modal?.classList.contains("hidden")) closeModal();
  });
  modal?.querySelector('[aria-hidden="true"]')?.addEventListener("click", closeModal);

  // Delegado global: footer/header abren preferencias
  document.addEventListener("click", (e) => {
    const t = e.target?.closest?.('#open-cookie-preferences, [data-open-cookie-preferences]');
    if (!t) return;
    e.preventDefault();
    window.openCookiePreferences && window.openCookiePreferences();
  });

  // Blindaje extra en Translate para evitar el diálogo molesto
  if (IS_TRANSLATE) {
    const SEL = '#open-cookie-preferences, [data-open-cookie-preferences], #cookie-accept-all, #cookie-reject-all, #cookie-open-prefs, #cookie-save, #cookie-cancel, #cookie-close-x';
    const intercept = (type) => document.addEventListener(type, (e) => {
      const t = e.target && e.target.closest(SEL);
      if (!t) return;
      e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation();
      // Re-dispatch manual en los casos necesarios
      if (type === 'click' || type === 'pointerdown' || type === 'touchend' || type === 'mouseup' || type === 'auxclick') {
        const id = t.id;
        if (id === 'open-cookie-preferences' || id === 'cookie-open-prefs') {
          window.openCookiePreferences && window.openCookiePreferences();
        } else if (id === 'cookie-accept-all') {
          const c = saveLocalConsent({ analytics: true, marketing: true });
          applyConsent(c); hideBanner(); cleanupParams(); pushConsentToOrigin(c);
        } else if (id === 'cookie-reject-all') {
          const c = saveLocalConsent({ analytics: false, marketing: false });
          applyConsent(c); hideBanner(); cleanupParams(); pushConsentToOrigin(c);
        } else if (id === 'cookie-save') {
          const c = { analytics: ckAnalytics?.checked || false, marketing: ckMarketing?.checked || false };
          const saved = saveLocalConsent(c);
          applyConsent(saved); closeModal(); hideBanner(); cleanupParams(); pushConsentToOrigin(saved);
        } else if (id === 'cookie-cancel' || id === 'cookie-close-x') {
          closeModal();
        }
      }
    }, true);
    ['pointerdown','click','touchstart','touchend','mousedown','mouseup','auxclick'].forEach(intercept);
  }
})();
</script>




